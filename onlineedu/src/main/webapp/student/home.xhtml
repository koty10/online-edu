<ui:composition template="/WEB-INF/templates/student-template.xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                xmlns:o="http://omnifaces.org/ui"
                xmlns:of="http://omnifaces.org/functions">

    <ui:define name="metadata">
        <f:metadata>
            <o:viewParam name="teachingId" value="#{studentTeachingBean.teachingId}" requiredMessage="No teaching specified." default="#{studentTeachingBean.defaultStudentTeaching.id}">
                <f:validateLongRange minimum="1"/>
            </o:viewParam>
            <f:viewAction action="#{studentTeachingBean.initTeaching}"/>
        </f:metadata>
    </ui:define>

    <ui:define name="title">
        New page title here
    </ui:define>

    <ui:define name="content">
        <h1>Třídní chat</h1>

        <p:messages globalOnly="true" errorStyle="color: red" infoStyle="color:green"/>
        <h:form id="webSocketForm">

            <p:inputText id="websocketMessageText" value="#{chatBean.messageText}"/>
            <p:commandButton id="sendMessage" action="#{chatBean.sendMessage(studentTeachingBean.teachingId)}" icon="fas fa-paper-plane" update="webSocketForm:websocketMessageText" />

            <div id="messageDiv">
                <div hidden="hidden" id="user-id">#{userBackingBean.loggedInUser.id}</div>
                <p:repeat value="#{chatBean.getMessages(studentTeachingBean.teachingId)}" var="message">
                    <div class="chat-message-container #{(message.userAccount.id == userBackingBean.loggedInUser.id) ? 'darker' : ''}">
                        <div class="chat-message-box #{(message.userAccount.role.equals('teacher')) ? 'message-teacher' : 'message-student'}">

                            <p:graphicImage value="/avatars/user/#{message.userAccount.id}" rendered="#{(message.userAccount.id != userBackingBean.loggedInUser.id)}"/>

                            <div class="chat-message-content">
                                <div class="chat-message-message">
                                    <p>#{message.text}</p>
                                </div>
                                <div class="time-#{(message.userAccount.id == userBackingBean.loggedInUser.id) ? 'right' : 'left'}">
                                    #{message.userAccount.firstname} #{message.userAccount.surname} (#{message.userAccount.getRoleFormated()}) | #{message.getTimeFormated()}
                                </div>
                            </div>

                            <p:graphicImage value="/avatars/user/#{message.userAccount.id}" rendered="#{(message.userAccount.id == userBackingBean.loggedInUser.id)}"/>

                        </div>
                    </div>
                </p:repeat>
            </div>


            <template>
                <div id="template-chat-message-container" class="chat-message-container">
                    <div id="template-chat-message-box" class="chat-message-box">
                        <div id="template-chat-message-content" class="chat-message-content">
                            <div class="chat-message-message">
                                <p id="template-chat-message-text"></p>
                            </div>
                            <div id="template-chat-message-username">
                            </div>
                        </div>
                    </div>
                </div>
            </template>


            <script type="text/javascript">
                function websocketOpenListener(channel) {
                    console.log("Connected to channel: " + channel);
                }
                function messageListener(message, channel, event){

                    const userid = document.getElementById("user-id");

                    const temp = document.getElementsByTagName("template")[0];
                    let clone = temp.content.cloneNode(true);

                    let container = clone.getElementById("template-chat-message-container");
                    let messageBox = clone.getElementById("template-chat-message-box");
                    let text = clone.getElementById("template-chat-message-text");
                    let username = clone.getElementById("template-chat-message-username");

                    let img = document.createElement('img');

                    const json = JSON.parse(message);

                    img.src = "/avatars/user/" + json.userAccount.id.toString();

                    if (userid.innerText === json.userAccount.id.toString()) {
                        container.classList.add("darker");
                        username.classList.add("time-right");
                        messageBox.appendChild(img);
                    }
                    else {
                        username.classList.add("time-left");
                        messageBox.insertBefore(img, messageBox.childNodes[0]);
                    }

                    if (json.userAccount.role === "teacher") {
                        messageBox.classList.add("message-teacher");
                    }
                    else {
                        messageBox.classList.add("message-student");
                    }

                    text.innerHTML += json.text;
                    username.innerHTML += json.userAccount.firstname + " " + json.userAccount.surname + " (" + json.userAccount.roleFormated + ") | " + json.timeFormated;

                    let messages = document.getElementById("messageDiv");
                    messages.insertBefore(clone, messages.firstChild);

                    document.getElementById("webSocketForm:websocketMessageText").innerText = null;
                }
            </script>

            <o:socket channel="messagePusher" onmessage="messageListener" onopen="websocketOpenListener" user="#{studentTeachingBean.teachingId}" >
            </o:socket>

        </h:form>

    </ui:define>
</ui:composition>
